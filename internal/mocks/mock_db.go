// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/db.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// GetRate mocks base method.
func (m *MockDatabase) GetRate(from, to, date string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRate", from, to, date)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRate indicates an expected call of GetRate.
func (mr *MockDatabaseMockRecorder) GetRate(from, to, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRate", reflect.TypeOf((*MockDatabase)(nil).GetRate), from, to, date)
}

// InsertMultipleRates mocks base method.
func (m *MockDatabase) InsertMultipleRates(base, date string, rates map[string]float64, ttl time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMultipleRates", base, date, rates, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMultipleRates indicates an expected call of InsertMultipleRates.
func (mr *MockDatabaseMockRecorder) InsertMultipleRates(base, date, rates, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMultipleRates", reflect.TypeOf((*MockDatabase)(nil).InsertMultipleRates), base, date, rates, ttl)
}

// InsertRate mocks base method.
func (m *MockDatabase) InsertRate(from, to, date string, rate float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRate", from, to, date, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRate indicates an expected call of InsertRate.
func (mr *MockDatabaseMockRecorder) InsertRate(from, to, date, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRate", reflect.TypeOf((*MockDatabase)(nil).InsertRate), from, to, date, rate)
}
